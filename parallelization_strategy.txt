Author: Reeshabh Kumar Ranjan
Roll number: 2017086

# Parallelization strategy

I have used the executor service in order to parallelize the transactions.
Since the Account class need not be modified, I created another class named Transaction.
It has two fields, sender (Account), receiver (Account) and amount to transfer (int).
Now the sender and receiver are marked as volatile, so that the threads (other Transaction objects) can access the latest updated value available.
There is a method in the Transaction class, named performTransaction().

Now, since creating each transaction a task for parallelization will result in 1e7 tasks in hand, I created another class named TransactionSet.
As name implies, it is a set of transactions. TransactionSet is of Runnable type. I have distributed the 1e7 transactions into 100 transactionSets.
This way, I have 100 tasks at hand. The reason to do this is if I create 1e7 tasks instead, there will be a lot of overheads that will come along with them, such as huge amound of context-switching.

The Bank class, once initialised, creates all the accounts and performs the transactions. Each transaction is verified (if race condition/memory inconsistency are avoided or not).
I use an array which corresponds to each account's balance. It updates accordingly as transactions are added in the list of transactions. Once all the transactions are computed,
I check if the balance of accounts corresponds to as expected in the expected[] array.

Sample output:

-------------------------------------------------------------------------------------------------

Calculating performance. Please wait.

1 Thread(s): 0.428000 seconds
Processing PASSED
2 Thread(s): 0.337000 seconds
Processing PASSED
3 Thread(s): 0.310000 seconds
Processing PASSED
4 Thread(s): 0.256000 seconds
Processing PASSED

Process finished with exit code 0

-------------------------------------------------------------------------------------------------
